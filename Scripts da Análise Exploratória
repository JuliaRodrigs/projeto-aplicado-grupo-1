# -*- coding: utf-8 -*-
"""Porj_Aplic1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WyRh4QuYqvh-khh8gaSjr_3TuJVyEAfd
"""

import pandas as pd

pd.read_csv('marketing_campaign.csv', sep='\t')

# Baixando Dataset

mktg = pd.read_csv('marketing_campaign.csv', sep='\t')

# Primeira análise para conhecer os dados

mktg.shape

mktg.head()

from pandas import DataFrame

# Verificando tipo de dados

mktg.dtypes

type(mktg)

# Verificando as principais estatíticas

mktg.describe()

mktg.columns

import numpy as np

## Veridicando qtde de valores nulos

mktg.isnull().sum()

# Acrescentando Coluna Idade do consumidor - Age

import datetime

today = datetime.date.today()

mktg['Age'] = today.year - mktg['Year_Birth']

mktg.head()

## Selecionando as colunas que iremos utilizar

# entender qual é o meio de venda que mais atrai o público observado, considerando os diferentes perfis apresentados.

# Entender os perfis que cada canal atrai e o porquê

# Gastos de cada cliente

# Criar uma nova coluna com a soma dos gastos por cliente
mktg['Gastos_Total'] = mktg[['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds']].sum(axis=1)

# Exibir as 10 primeiras linhas do resultado
print(mktg[['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'Gastos_Total']].head(10))

mktg1 = mktg[['ID', 'Age','Income','Kidhome','Teenhome', 'NumDealsPurchases','Complain','Gastos_Total','NumWebPurchases','NumCatalogPurchases','NumStorePurchases', 'NumWebVisitsMonth']]
mktg1

## Estatísticas Prontas

mktg1.describe()

# Renomeando as colunas

mktg1 = mktg1.rename(columns={
    "ID": "Id",
    "Age": "Idade",
    "Income": "Renda",
    "Kidhome": "Num_Criancas",
    "Teenhome": "Num_Adolesc",
    "NumDealsPurchases": "Compras_Desc",
    "Complain": "Aceitou_Promo",
    "Gastos_Total": "Gastos_Total",
    "NumWebPurchases": "Num_Site",
    "NumCatalogPurchases": "Num_Catalogo",
    "NumStorePurchases": "Num_lojas",
    "NumWebVisitsMonth": "Num_Visitas_Site"
})

print(mktg1.columns)

print(mktg1)

# Sobre os clientes

import matplotlib.pyplot as plt
import seaborn as sns
import sys

plt.figure(figsize=(11,14))
mktg1['Idade'].value_counts().sort_index(ascending=False).plot(kind='barh')
plt.title('Idade')

# Outleirs

# Cria a figura e as subplots
fig, axs = plt.subplots(ncols=2, figsize=(10,5))

# Plotagem do primeiro boxplot
sns.boxplot(x='Idade', data=mktg1, ax=axs[0])
axs[0].set_title('Idade')

# Plotagem do segundo boxplot
sns.boxplot(x='Renda', data=mktg1, color='pink', ax=axs[1])
axs[1].set_title('Renda')
plt.show()

# Calcula o intervalo interquartil (IQR)
Q1 = mktg1['Idade'].quantile(0.25)
Q3 = mktg1['Idade'].quantile(0.75)
IQR = Q3 - Q1

# Identifica os outliers
outliers = mktg1[(mktg1['Idade'] < Q1 - 1.5 * IQR) | (mktg1['Idade'] > Q3 + 1.5 * IQR)]

print(outliers)

# Calcula o intervalo interquartil (IQR)
Q1 = mktg1['Renda'].quantile(0.25)
Q3 = mktg1['Renda'].quantile(0.75)
IQR = Q3 - Q1

# Identifica os outliers
outliers = mktg1[(mktg1['Renda'] < Q1 - 1.5 * IQR) | (mktg1['Renda'] > Q3 + 1.5 * IQR)]

print(outliers)

# Cria a figura e as subplots
fig, axs = plt.subplots(ncols=2, figsize=(10,5))

# Plotagem do primeiro boxplot
sns.boxplot(x='Num_Site', data=mktg1, ax=axs[0])
axs[0].set_title('Compras em lojas')

# Plotagem do segundo boxplot
sns.boxplot(x='Num_Visitas_Site', data=mktg1, color='green', ax=axs[1])
axs[1].set_title('Visitas Site/Mês')
plt.show()

fig, axs = plt.subplots(ncols=2, figsize=(10,5))

sns.boxplot(x='Num_Catalogo', data=mktg1, ax=axs[0])
axs[0].set_title('Compras Catálogo')

sns.boxplot(x='Num_lojas', data=mktg1, color='red',  ax=axs[1])
axs[1].set_title('Compras Loja')

plt.show()

import pandas as pd

# Identificando os Outliers por colunas

# Calcula o intervalo interquartil (IQR)
Q1 = mktg1['Num_Site'].quantile(0.25)
Q3 = mktg1['Num_Site'].quantile(0.75)
IQR = Q3 - Q1

# Identifica os outliers
outliers = mktg1[(mktg1['Num_Site'] < Q1 - 1.5 * IQR) | (mktg1['Num_Site'] > Q3 + 1.5 * IQR)]

# Calcula o intervalo interquartil (IQR)
Q1 = mktg1['Num_Visitas_Site'].quantile(0.25)
Q3 = mktg1['Num_Visitas_Site'].quantile(0.75)
IQR = Q3 - Q1

# Identifica os outliers
outliers = mktg1[(mktg1['Num_Visitas_Site'] < Q1 - 1.5 * IQR) | (mktg1['Num_Visitas_Site'] > Q3 + 1.5 * IQR)]

# Calcula o intervalo interquartil (IQR)
Q1 = mktg1['Num_Catalogo'].quantile(0.25)
Q3 = mktg1['Num_Catalogo'].quantile(0.75)
IQR = Q3 - Q1

# Identifica os outliers
outliers = mktg1[(mktg1['Num_Catalogo'] < Q1 - 1.5 * IQR) | (mktg1['Num_Catalogo'] > Q3 + 1.5 * IQR)]

# Quantidade de Clientes com filhos.

counts = mktg1['Num_Criancas'].value_counts()
counts

counts = mktg1['Num_Adolesc'].value_counts()
counts

# Cliente com filhos crianças e adolescente

clientes_com_filhos = mktg1.loc[(mktg1['Num_Criancas'] == 1) & (mktg1['Num_Adolesc'] == 1)]
len(clientes_com_filhos)

len(clientes_com_filhos)/len(mktg1)

## Clientes sem filhos - nem crianças e nem adolescentes

clientes_sem_filhos = mktg1.loc[(mktg1['Num_Criancas'] == 0) & (mktg1['Num_Adolesc'] == 0)]
len(clientes_sem_filhos)

len(clientes_sem_filhos)/len(mktg1)

# Contar o número de ocorrências de cada valor
counts = mktg1['Num_Criancas'].value_counts()

# Calcular o percentual correspondente
total = len(mktg1)
percentages = counts / total * 100

# Exibir os resultados
print('Clientes com 0 crianças:', percentages[0])

# Contar o número de ocorrências de cada valor
counts = mktg1['Num_Adolesc'].value_counts()

# Calcular o percentual correspondente
total = len(mktg1)
percentages = counts / total * 100

# Exibir os resultados
print('Clientes com 0 filhos:', percentages[0])

# Gráfico de número de filhos por cliente

x = mktg1[ mktg1.Num_Adolesc == 1 ].Idade
y =  mktg1[ mktg1.Num_Criancas == 1 ].Idade

plt.subplot(1, 2, 1)  

plt.pie([x.sum(),y.sum()],
        colors=['c','g'],
        explode=[0, 0.1],
        labels=[' Adolescentes',' Crianças'],
        autopct='%1.2f%%')    
plt.title('Pais com 1 filhos', fontsize=12, weight='bold')


z =  mktg1[ mktg1.Num_Adolesc == 2 ].Idade
a =  mktg1[ mktg1.Num_Criancas == 2 ].Idade

plt.subplot(1, 2, 2)  
plt.pie([z.sum(),a.sum()],
        colors=['b','y'],
        explode=[0, 0.1],
        labels=[' Adolescentes',' Crianças'],
        autopct='%1.2f%%')    
plt.title('Pais com 2 filhos', fontsize=12, weight='bold')

plt.subplot(1, 2, 1) 
plt.hist( mktg1.Num_Criancas ,color='green')
plt.xlabel('Quant filhos Crianças')
plt.ylabel('Quant de Clientes')
plt.title('Número de Crianças')
plt.legend(['Num_Crianças'])

plt.subplot(1, 2, 2) 
plt.hist(mktg1.Num_Adolesc)
plt.xlabel('Quant filhos adolescentes')
plt.ylabel('Quant de Clientes')
plt.title('Número de adolescentes')
plt.legend(['Num_Adolesc'])

plt.show()

import matplotlib.pyplot as plt

df4_adolesc = mktg1[(mktg1["Renda"]> 51381.50) & (mktg1["Num_Criancas"].isin([0, 1, 2]))]

# Criar três subplots para cada quantidade de filhos adolescentes
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plotar gráfico de barras para 0 filhos adolescentes
axs[0].bar("Idade", "Renda", data=df4_adolesc[df4_adolesc["Num_Criancas"] == 0], color="green", linewidth=2)
axs[0].set_xlabel("Idade")
axs[0].set_ylabel("Renda")
axs[0].set_title("Renda acima da média e sem Crianças")

# Plotar gráfico de barras para 1 filho adolescente
axs[1].bar("Idade", "Renda", data=df4_adolesc[df4_adolesc["Num_Criancas"] == 1], color="blue", linewidth=2)
axs[1].set_xlabel("Idade")
axs[1].set_ylabel("Renda")
axs[1].set_title("Renda acima da média e 1 Crianças")

# Plotar gráfico de barras para 2 filhos adolescentes
axs[2].bar("Idade", "Renda", data=df4_adolesc[df4_adolesc["Num_Criancas"] == 2], color="pink", linewidth=2)
axs[2].set_xlabel("Idade")
axs[2].set_ylabel("Renda")
axs[2].set_title("Renda acima da média e 2 Crianças")

plt.show()

df_adolesc = mktg1[(mktg1["Renda"] > 51381.50) & (mktg1["Num_Adolesc"].isin([0, 1, 2]))]

# Criar três subplots para cada quantidade de filhos adolescentes
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plotar gráfico de barras para 0 filhos adolescentes
axs[0].bar("Idade", "Renda", data=df_adolesc[df_adolesc["Num_Adolesc"] == 0], color="green", linewidth=2)
axs[0].set_xlabel("Idade")
axs[0].set_ylabel("Renda")
axs[0].set_title("Renda acima da média e sem adolesc")

# Plotar gráfico de barras para 1 filho adolescente
axs[1].bar("Idade", "Renda", data=df_adolesc[df_adolesc["Num_Adolesc"] == 1], color="blue", linewidth=2)
axs[1].set_xlabel("Idade")
axs[1].set_ylabel("Renda")
axs[1].set_title("Renda acima da média e 1 adolesc")

# Plotar gráfico de barras para 2 filhos adolescentes
axs[2].bar("Idade", "Renda", data=df_adolesc[df_adolesc["Num_Adolesc"] == 2], color="pink", linewidth=2)
axs[2].set_xlabel("Idade")
axs[2].set_ylabel("Renda")
axs[2].set_title("Renda acima da média e 2 adolesc")

plt.show()

df1_adolesc = mktg1[(mktg1["Renda"] < 51381.50) & (mktg1["Num_Adolesc"].isin([0, 1, 2]))]

# Criar três subplots para cada quantidade de filhos adolescentes
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plotar gráfico de barras para 0 filhos adolescentes
axs[0].bar("Idade", "Renda", data=df1_adolesc[df1_adolesc["Num_Adolesc"] == 0], color="green", linewidth=2)
axs[0].set_xlabel("Idade")
axs[0].set_ylabel("Renda")
axs[0].set_title("Renda abaixo da média e sem adolesc")

# Plotar gráfico de barras para 1 filho adolescente
axs[1].bar("Idade", "Renda", data=df1_adolesc[df1_adolesc["Num_Adolesc"] == 1], color="blue", linewidth=2)
axs[1].set_xlabel("Idade")
axs[1].set_ylabel("Renda")
axs[1].set_title("Renda abaixo da média e 1 adolesc")

# Plotar gráfico de barras para 2 filhos adolescentes
axs[2].bar("Idade", "Renda", data=df1_adolesc[df1_adolesc["Num_Adolesc"] == 2], color="pink", linewidth=2)
axs[2].set_xlabel("Idade")
axs[2].set_ylabel("Renda")
axs[2].set_title("Renda abaixo da média e 2 adolesc")

plt.show()

df2_adolesc = mktg1[(mktg1["Renda"] < 51381.50) & (mktg1["Num_Criancas"].isin([0, 1, 2]))]

# Criar três subplots para cada quantidade de filhos adolescentes
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

# Plotar gráfico de barras para 0 filhos adolescentes
axs[0].bar("Idade", "Renda", data=df2_adolesc[df2_adolesc["Num_Criancas"] == 0], color="green", linewidth=2)
axs[0].set_xlabel("Idade")
axs[0].set_ylabel("Renda")
axs[0].set_title("Renda abaixo da média e sem Crianças")

# Plotar gráfico de barras para 1 filho adolescente
axs[1].bar("Idade", "Renda", data=df2_adolesc[df2_adolesc["Num_Criancas"] == 1], color="blue", linewidth=2)
axs[1].set_xlabel("Idade")
axs[1].set_ylabel("Renda")
axs[1].set_title("Renda abaixo da média e 1 Crianças")

# Plotar gráfico de barras para 2 filhos adolescentes
axs[2].bar("Idade", "Renda", data=df2_adolesc[df2_adolesc["Num_Criancas"] == 2], color="pink", linewidth=2)
axs[2].set_xlabel("Idade")
axs[2].set_ylabel("Renda")
axs[2].set_title("Renda abaixo da média e 2 Crianças")

plt.show()

import numpy as np

# Outleirs de Renda acima do 3º quartil

# Calcular a média de idade
media_idade = mktg1['Idade'].mean()

# Filtrar clientes com média de renda acima de 68522 e idade acima da média
clientes_filtrados = mktg1[(mktg1['Renda'] > 68522) & (mktg1['Idade'] > media_idade)]

# Exibir as idades dos clientes filtrados
print(clientes_filtrados['Idade'])

# Calcular frequência de cada idade
idade_counts = clientes_filtrados['Idade'].value_counts()

plt.bar(idade_counts.index, idade_counts.values)
plt.title("Frequência de idades em clientes filtrados")
plt.xlabel("Idade")
plt.ylabel("Frequência")

plt.show()

# Filtrar clientes com renda acima de Máximo
clientes_filtrados = mktg1[mktg1['Renda'] > 1730.0]

# Plotar histograma da idade
plt.hist(clientes_filtrados['Idade'], bins=20, color='blue')
plt.xlabel('Idade')
plt.ylabel('Frequência')
plt.title('Idade de Clientes Outleirs de Renda')

plt.show()

# cliente com  filho Adolescente que aceitou a ultima oferta. Coluna Aceitou Promo = 1 (sim)

clientes_filtrados1 = mktg1[(mktg1['Num_Adolesc'] == 1) & (mktg1['Aceitou_Promo'] == 1)]
clientes_filtrados = mktg1[(mktg1['Num_Adolesc'] == 0) & (mktg1['Aceitou_Promo'] == 1)]
clientes_filtrados2 = mktg1[(mktg1['Num_Adolesc'] == 2) & (mktg1['Aceitou_Promo'] == 1)]

clientes_por_idade = clientes_filtrados.groupby('Idade').size()

plt.pie(clientes_por_idade.values, labels=clientes_por_idade.index)
plt.title('Clientes sem filho adolescente que aceitaram a promoção, por idade')
plt.xlabel('Idade')
plt.ylabel('Número de clientes')

plt.show()

clientes_por_idade = clientes_filtrados1.groupby('Idade').size()

plt.pie(clientes_por_idade.values, labels=clientes_por_idade.index, autopct='%1.1f%%')
plt.title('Clientes com 1 filho adolescente que aceitaram a promoção, por idade')
plt.xlabel('Idade')
plt.ylabel('Número de clientes')

plt.show()

clientes_por_idade = clientes_filtrados2.groupby('Idade').size()

plt.pie(clientes_por_idade.values, labels=clientes_por_idade.index, autopct='%1.1f%%')
plt.title('Clientes com 2 filho adolescente que aceitaram a promoção, por idade')
plt.xlabel('Idade')
plt.ylabel('Número de clientes')

plt.show()

# cliente com  filho Criança que aceitou a ultima oferta. Coluna Aceitou Promo = 1 (sim)

cli_filtrados = mktg1[(mktg1['Num_Criancas'] == 0) & (mktg1['Aceitou_Promo'] == 1)]
cli_filtrados1 = mktg1[(mktg1['Num_Criancas'] == 1) & (mktg1['Aceitou_Promo'] == 1)]
cli_filtrados2 = mktg1[(mktg1['Num_Criancas'] == 2) & (mktg1['Aceitou_Promo'] == 1)]

cli_por_idade = cli_filtrados.groupby('Idade').size()

plt.pie(cli_por_idade.values, labels=cli_por_idade.index )
plt.title('Sem Crianças/Aceitaram Promo')
plt.xlabel('Idade')
plt.ylabel('Clientes')
plt.subplots_adjust(wspace=0.5)

plt.show()

cli_por_idade = cli_filtrados1.groupby('Idade').size()

plt.pie(cli_por_idade.values, labels=cli_por_idade.index)
plt.title('1 Crianças/Aceitaram Promo')
plt.xlabel('Idade')
plt.ylabel('Clientes')
plt.subplots_adjust(wspace=0.5)


plt.show()

cli_por_idade = cli_filtrados2.groupby('Idade').size()

plt.pie(cli_por_idade.values, labels=cli_por_idade.index, autopct='%1.1f%%')
plt.title('2 Crianças/Aceitaram Promo')
plt.xlabel('Idade')
plt.ylabel('Clientes')

plt.show()

# Analisando as compras

plt.figure(figsize=(12,7), facecolor='lightyellow')
ax = mktg1[['Compras_Desc', 'Num_Site', 'Num_Catalogo', 'Num_lojas']].sum().sort_values(ascending=True).plot(kind='barh')
plt.title('Compras', pad=15, fontsize=18, fontweight='semibold')
rects = ax.patches
for rect in rects:
  x_value = rect.get_width()
  y_value = rect.get_y() + rect.get_height() / 2
  plt.annotate('{}'.format(x_value), (x_value, y_value), xytext=(-50, 0),
               textcoords='offset points', va='center', ha='left', color = 'white', fontsize=14, fontweight='semibold')

# Mostrando a lista de clientes que fizeram pelo menos uma compra no site

# Selecionando apenas as colunas necessárias do dataset original
mktg1_subset5 = mktg1[['Id', 'Num_Site']]

# Filtrando clientes que fizeram pelo menos uma compra no site
compras_por_cliente = mktg1_subset5[mktg1_subset5['Num_Site'] >= 1]

num_linhas = compras_por_cliente.shape
print('Quantidade de clientes que fizeram pelo menos uma compra no site',num_linhas)

# Mostrando a lista de clientes que fizeram pelo menos uma compra no Catalogo

mktg1_subset3 = mktg1[['Id', 'Num_Catalogo']]

compras_cli_Cat = mktg1_subset3[mktg1_subset3['Num_Catalogo'] >= 1]

num_linhas2 = compras_cli_Cat.shape
print('Quantidade de clientes que fizeram pelo menos uma compra no catalogo',num_linhas2)

# Mostrando a lista de clientes que fizeram pelo menos uma compra na Loja

mktg1_sub1 = mktg1[['Id', 'Num_lojas']]

compras_cli_Loja = mktg1_sub1[mktg1_sub1['Num_lojas'] >= 1]

num_linhas3 = compras_cli_Loja.shape
print('Quantidade de clientes que fizeram pelo menos uma compra no loja',num_linhas3)

compras_cli_Cat = mktg1_subset3[mktg1_subset3['Num_Catalogo'] >= 1]
clientes_por_catalogo = compras_cli_Cat['Num_Catalogo'].value_counts().sort_index()

plt.subplot(1, 3, 1) 
plt.bar(clientes_por_catalogo.index, clientes_por_catalogo, color='green')
plt.title("Catálogo")
plt.xlabel("Compras Catálogos")
plt.ylabel("Qtd de Clientes")

compras_cli_Loja = mktg1_sub1[mktg1_sub1['Num_lojas'] >= 1]
clientes_por_catalogo = compras_cli_Loja['Num_lojas'].value_counts().sort_index()

plt.subplot(1, 3, 2) 
plt.bar(clientes_por_catalogo.index, clientes_por_catalogo, color='pink')
plt.title("Loja")
plt.xlabel("Compras Loja")
plt.ylabel("Qtd de Clientes")

compras_por_cliente = mktg1_subset5[mktg1_subset5['Num_Site'] >= 1]
clientes_por_catalogo = compras_por_cliente['Num_Site'].value_counts().sort_index()

plt.subplot(1, 3, 3) 
plt.bar(clientes_por_catalogo.index, clientes_por_catalogo, color='yellow')
plt.title("Site")
plt.xlabel("Compras Site")
plt.ylabel("Qtd de Clientes")

# Ajustar a distância entre os gráficos
plt.subplots_adjust(wspace=0.5)

# Exibir o gráfico
plt.show()

# Relação entre meio de compra e clientes com filhos crianças.

# calcular a média das compras por número de crianças
compras_por_criancas = mktg1.groupby('Num_Criancas')[['Num_lojas', 'Num_Site', 'Num_Catalogo']].mean()

compras_por_criancas.plot(kind='bar', stacked=True)
plt.title("Média de Compras")
plt.xlabel("Número de Crianças")
plt.ylabel("Média de Compras")

plt.legend(title="Canais de Compra", loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

plt.xticks(rotation='horizontal')
plt.tight_layout()

plt.show()

# Relação entre meio de compra e clientes com filhos Adolescentes.

compras_por_adolesc = mktg1.groupby('Num_Adolesc')[['Num_lojas', 'Num_Site', 'Num_Catalogo']].mean()

cores = ['green', 'pink', 'yellow']

# Criar um gráfico de barras empilhadas com cores personalizadas
compras_por_adolesc.plot(kind='bar', stacked=True, color=cores)

plt.title("Média de Compras por Número de Adolescentes")
plt.xlabel("Número de Adolescentes")
plt.ylabel("Média de Compras")
plt.legend(title="Canais de Compra", loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

plt.xticks(rotation='horizontal')
plt.tight_layout()

plt.show()

# Relação entre renda, meios de compra e filhos

# Agrupar os dados por Num_Criancas e calcular a média das colunas Renda, Num_lojas, Num_Site e Num_Catalogo
compra_por_criancas1 = mktg1.groupby('Num_Criancas')[['Renda', 'Num_lojas', 'Num_Site', 'Num_Catalogo']].mean()

# Normalizar as médias de compras para que elas possam ser comparadas com a média da Renda
compra_por_criancas1['Num_lojas_norm'] = compra_por_criancas1['Num_lojas'] / compra_por_criancas1['Renda']
compra_por_criancas1['Num_Site_norm'] = compra_por_criancas1['Num_Site'] / compra_por_criancas1['Renda']
compra_por_criancas1['Num_Catalogo_norm'] = compra_por_criancas1['Num_Catalogo'] / compra_por_criancas1['Renda']

# Selecionar apenas as colunas normalizadas
compras_norm = compra_por_criancas1[['Num_lojas_norm', 'Num_Site_norm', 'Num_Catalogo_norm']]

cores = ['blue', 'orange', 'green']
compras_norm.plot(kind='bar', stacked=True, color=cores)

plt.title("Média de Compras por Renda e Número de Crianças")
plt.xlabel("Número de Crianças")
plt.ylabel("Média de Compras")
plt.legend(title="Canais de Compra", loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

plt.xticks(rotation='horizontal')

plt.show()

compras_por_adolesc1 = mktg1.groupby('Num_Adolesc')[['Renda', 'Num_lojas', 'Num_Site', 'Num_Catalogo']].mean()

# Normalizar as médias de compras para que elas possam ser comparadas com a média da Renda
compras_por_adolesc1['Num_lojas_norm'] = compras_por_adolesc1['Num_lojas'] / compras_por_adolesc1['Renda']
compras_por_adolesc1['Num_Site_norm'] = compras_por_adolesc1['Num_Site'] / compras_por_adolesc1['Renda']
compras_por_adolesc1['Num_Catalogo_norm'] = compras_por_adolesc1['Num_Catalogo'] / compras_por_adolesc1['Renda']

compras_norm = compras_por_adolesc1[['Num_lojas_norm', 'Num_Site_norm', 'Num_Catalogo_norm']]

cores = ['pink', 'orange', 'green']
compras_norm.plot(kind='bar', stacked=True, color=cores)

plt.title("Média de Compras por Renda e Número de Adolescentes")
plt.xlabel("Número de Adolescentes")
plt.ylabel("Média de Compras")
plt.legend(title="Canais de Compra", loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=3)

plt.xticks(rotation='horizontal')

plt.show()
